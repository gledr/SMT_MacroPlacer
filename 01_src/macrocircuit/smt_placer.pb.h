// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: placer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_placer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_placer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_placer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_placer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_placer_2eproto;
namespace placer {
class Macro;
class MacroDefaultTypeInternal;
extern MacroDefaultTypeInternal _Macro_default_instance_;
class MacroCircuit;
class MacroCircuitDefaultTypeInternal;
extern MacroCircuitDefaultTypeInternal _MacroCircuit_default_instance_;
class Terminal;
class TerminalDefaultTypeInternal;
extern TerminalDefaultTypeInternal _Terminal_default_instance_;
}  // namespace placer
PROTOBUF_NAMESPACE_OPEN
template<> ::placer::Macro* Arena::CreateMaybeMessage<::placer::Macro>(Arena*);
template<> ::placer::MacroCircuit* Arena::CreateMaybeMessage<::placer::MacroCircuit>(Arena*);
template<> ::placer::Terminal* Arena::CreateMaybeMessage<::placer::Terminal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace placer {

enum eOrientation : int {
  eNorth = 0,
  eWest = 1,
  eSouth = 2,
  eEast = 3
};
bool eOrientation_IsValid(int value);
constexpr eOrientation eOrientation_MIN = eNorth;
constexpr eOrientation eOrientation_MAX = eEast;
constexpr int eOrientation_ARRAYSIZE = eOrientation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eOrientation_descriptor();
template<typename T>
inline const std::string& eOrientation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eOrientation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eOrientation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eOrientation_descriptor(), enum_t_value);
}
inline bool eOrientation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, eOrientation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eOrientation>(
    eOrientation_descriptor(), name, value);
}
enum eDirection : int {
  eInput = 0,
  eOutput = 1,
  eBiDirectional = 2,
  eUnknown = 3
};
bool eDirection_IsValid(int value);
constexpr eDirection eDirection_MIN = eInput;
constexpr eDirection eDirection_MAX = eUnknown;
constexpr int eDirection_ARRAYSIZE = eDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* eDirection_descriptor();
template<typename T>
inline const std::string& eDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, eDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function eDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    eDirection_descriptor(), enum_t_value);
}
inline bool eDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, eDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<eDirection>(
    eDirection_descriptor(), name, value);
}
// ===================================================================

class Macro PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:placer.Macro) */ {
 public:
  inline Macro() : Macro(nullptr) {}
  virtual ~Macro();

  Macro(const Macro& from);
  Macro(Macro&& from) noexcept
    : Macro() {
    *this = ::std::move(from);
  }

  inline Macro& operator=(const Macro& from) {
    CopyFrom(from);
    return *this;
  }
  inline Macro& operator=(Macro&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Macro& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Macro* internal_default_instance() {
    return reinterpret_cast<const Macro*>(
               &_Macro_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Macro& a, Macro& b) {
    a.Swap(&b);
  }
  inline void Swap(Macro* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Macro* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Macro* New() const final {
    return CreateMaybeMessage<Macro>(nullptr);
  }

  Macro* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Macro>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Macro& from);
  void MergeFrom(const Macro& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Macro* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "placer.Macro";
  }
  protected:
  explicit Macro(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_placer_2eproto);
    return ::descriptor_table_placer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kOrientationFieldNumber = 5,
    kLxFieldNumber = 6,
    kLyFieldNumber = 7,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required int32 width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 height = 4;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .placer.eOrientation orientation = 5 [default = eNorth];
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  ::placer::eOrientation orientation() const;
  void set_orientation(::placer::eOrientation value);
  private:
  ::placer::eOrientation _internal_orientation() const;
  void _internal_set_orientation(::placer::eOrientation value);
  public:

  // optional int32 lx = 6;
  bool has_lx() const;
  private:
  bool _internal_has_lx() const;
  public:
  void clear_lx();
  ::PROTOBUF_NAMESPACE_ID::int32 lx() const;
  void set_lx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lx() const;
  void _internal_set_lx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ly = 7;
  bool has_ly() const;
  private:
  bool _internal_has_ly() const;
  public:
  void clear_ly();
  ::PROTOBUF_NAMESPACE_ID::int32 ly() const;
  void set_ly(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ly() const;
  void _internal_set_ly(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:placer.Macro)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  int orientation_;
  ::PROTOBUF_NAMESPACE_ID::int32 lx_;
  ::PROTOBUF_NAMESPACE_ID::int32 ly_;
  friend struct ::TableStruct_placer_2eproto;
};
// -------------------------------------------------------------------

class Terminal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:placer.Terminal) */ {
 public:
  inline Terminal() : Terminal(nullptr) {}
  virtual ~Terminal();

  Terminal(const Terminal& from);
  Terminal(Terminal&& from) noexcept
    : Terminal() {
    *this = ::std::move(from);
  }

  inline Terminal& operator=(const Terminal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Terminal& operator=(Terminal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Terminal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Terminal* internal_default_instance() {
    return reinterpret_cast<const Terminal*>(
               &_Terminal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Terminal& a, Terminal& b) {
    a.Swap(&b);
  }
  inline void Swap(Terminal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Terminal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Terminal* New() const final {
    return CreateMaybeMessage<Terminal>(nullptr);
  }

  Terminal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Terminal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Terminal& from);
  void MergeFrom(const Terminal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Terminal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "placer.Terminal";
  }
  protected:
  explicit Terminal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_placer_2eproto);
    return ::descriptor_table_placer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDirFieldNumber = 2,
    kPosXFieldNumber = 3,
    kPosYFieldNumber = 4,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .placer.eDirection dir = 2;
  bool has_dir() const;
  private:
  bool _internal_has_dir() const;
  public:
  void clear_dir();
  ::placer::eDirection dir() const;
  void set_dir(::placer::eDirection value);
  private:
  ::placer::eDirection _internal_dir() const;
  void _internal_set_dir(::placer::eDirection value);
  public:

  // optional int32 pos_x = 3;
  bool has_pos_x() const;
  private:
  bool _internal_has_pos_x() const;
  public:
  void clear_pos_x();
  ::PROTOBUF_NAMESPACE_ID::int32 pos_x() const;
  void set_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos_x() const;
  void _internal_set_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 pos_y = 4;
  bool has_pos_y() const;
  private:
  bool _internal_has_pos_y() const;
  public:
  void clear_pos_y();
  ::PROTOBUF_NAMESPACE_ID::int32 pos_y() const;
  void set_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pos_y() const;
  void _internal_set_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:placer.Terminal)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int dir_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_x_;
  ::PROTOBUF_NAMESPACE_ID::int32 pos_y_;
  friend struct ::TableStruct_placer_2eproto;
};
// -------------------------------------------------------------------

class MacroCircuit PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:placer.MacroCircuit) */ {
 public:
  inline MacroCircuit() : MacroCircuit(nullptr) {}
  virtual ~MacroCircuit();

  MacroCircuit(const MacroCircuit& from);
  MacroCircuit(MacroCircuit&& from) noexcept
    : MacroCircuit() {
    *this = ::std::move(from);
  }

  inline MacroCircuit& operator=(const MacroCircuit& from) {
    CopyFrom(from);
    return *this;
  }
  inline MacroCircuit& operator=(MacroCircuit&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MacroCircuit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MacroCircuit* internal_default_instance() {
    return reinterpret_cast<const MacroCircuit*>(
               &_MacroCircuit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MacroCircuit& a, MacroCircuit& b) {
    a.Swap(&b);
  }
  inline void Swap(MacroCircuit* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MacroCircuit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MacroCircuit* New() const final {
    return CreateMaybeMessage<MacroCircuit>(nullptr);
  }

  MacroCircuit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MacroCircuit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MacroCircuit& from);
  void MergeFrom(const MacroCircuit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MacroCircuit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "placer.MacroCircuit";
  }
  protected:
  explicit MacroCircuit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_placer_2eproto);
    return ::descriptor_table_placer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFieldNumber = 1,
    kTFieldNumber = 2,
  };
  // repeated .placer.Macro m = 1;
  int m_size() const;
  private:
  int _internal_m_size() const;
  public:
  void clear_m();
  ::placer::Macro* mutable_m(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::placer::Macro >*
      mutable_m();
  private:
  const ::placer::Macro& _internal_m(int index) const;
  ::placer::Macro* _internal_add_m();
  public:
  const ::placer::Macro& m(int index) const;
  ::placer::Macro* add_m();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::placer::Macro >&
      m() const;

  // repeated .placer.Terminal t = 2;
  int t_size() const;
  private:
  int _internal_t_size() const;
  public:
  void clear_t();
  ::placer::Terminal* mutable_t(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::placer::Terminal >*
      mutable_t();
  private:
  const ::placer::Terminal& _internal_t(int index) const;
  ::placer::Terminal* _internal_add_t();
  public:
  const ::placer::Terminal& t(int index) const;
  ::placer::Terminal* add_t();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::placer::Terminal >&
      t() const;

  // @@protoc_insertion_point(class_scope:placer.MacroCircuit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::placer::Macro > m_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::placer::Terminal > t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_placer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Macro

// required string name = 1;
inline bool Macro::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Macro::has_name() const {
  return _internal_has_name();
}
inline void Macro::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Macro::name() const {
  // @@protoc_insertion_point(field_get:placer.Macro.name)
  return _internal_name();
}
inline void Macro::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:placer.Macro.name)
}
inline std::string* Macro::mutable_name() {
  // @@protoc_insertion_point(field_mutable:placer.Macro.name)
  return _internal_mutable_name();
}
inline const std::string& Macro::_internal_name() const {
  return name_.Get();
}
inline void Macro::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Macro::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:placer.Macro.name)
}
inline void Macro::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:placer.Macro.name)
}
inline void Macro::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:placer.Macro.name)
}
inline std::string* Macro::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Macro::release_name() {
  // @@protoc_insertion_point(field_release:placer.Macro.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Macro::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:placer.Macro.name)
}

// required string id = 2;
inline bool Macro::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Macro::has_id() const {
  return _internal_has_id();
}
inline void Macro::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Macro::id() const {
  // @@protoc_insertion_point(field_get:placer.Macro.id)
  return _internal_id();
}
inline void Macro::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:placer.Macro.id)
}
inline std::string* Macro::mutable_id() {
  // @@protoc_insertion_point(field_mutable:placer.Macro.id)
  return _internal_mutable_id();
}
inline const std::string& Macro::_internal_id() const {
  return id_.Get();
}
inline void Macro::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Macro::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:placer.Macro.id)
}
inline void Macro::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:placer.Macro.id)
}
inline void Macro::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:placer.Macro.id)
}
inline std::string* Macro::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000002u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Macro::release_id() {
  // @@protoc_insertion_point(field_release:placer.Macro.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Macro::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:placer.Macro.id)
}

// required int32 width = 3;
inline bool Macro::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Macro::has_width() const {
  return _internal_has_width();
}
inline void Macro::clear_width() {
  width_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Macro::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Macro::width() const {
  // @@protoc_insertion_point(field_get:placer.Macro.width)
  return _internal_width();
}
inline void Macro::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  width_ = value;
}
inline void Macro::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:placer.Macro.width)
}

// required int32 height = 4;
inline bool Macro::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Macro::has_height() const {
  return _internal_has_height();
}
inline void Macro::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Macro::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Macro::height() const {
  // @@protoc_insertion_point(field_get:placer.Macro.height)
  return _internal_height();
}
inline void Macro::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
}
inline void Macro::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:placer.Macro.height)
}

// optional .placer.eOrientation orientation = 5 [default = eNorth];
inline bool Macro::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Macro::has_orientation() const {
  return _internal_has_orientation();
}
inline void Macro::clear_orientation() {
  orientation_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::placer::eOrientation Macro::_internal_orientation() const {
  return static_cast< ::placer::eOrientation >(orientation_);
}
inline ::placer::eOrientation Macro::orientation() const {
  // @@protoc_insertion_point(field_get:placer.Macro.orientation)
  return _internal_orientation();
}
inline void Macro::_internal_set_orientation(::placer::eOrientation value) {
  assert(::placer::eOrientation_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  orientation_ = value;
}
inline void Macro::set_orientation(::placer::eOrientation value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:placer.Macro.orientation)
}

// optional int32 lx = 6;
inline bool Macro::_internal_has_lx() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Macro::has_lx() const {
  return _internal_has_lx();
}
inline void Macro::clear_lx() {
  lx_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Macro::_internal_lx() const {
  return lx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Macro::lx() const {
  // @@protoc_insertion_point(field_get:placer.Macro.lx)
  return _internal_lx();
}
inline void Macro::_internal_set_lx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  lx_ = value;
}
inline void Macro::set_lx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lx(value);
  // @@protoc_insertion_point(field_set:placer.Macro.lx)
}

// optional int32 ly = 7;
inline bool Macro::_internal_has_ly() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Macro::has_ly() const {
  return _internal_has_ly();
}
inline void Macro::clear_ly() {
  ly_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Macro::_internal_ly() const {
  return ly_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Macro::ly() const {
  // @@protoc_insertion_point(field_get:placer.Macro.ly)
  return _internal_ly();
}
inline void Macro::_internal_set_ly(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  ly_ = value;
}
inline void Macro::set_ly(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ly(value);
  // @@protoc_insertion_point(field_set:placer.Macro.ly)
}

// -------------------------------------------------------------------

// Terminal

// required string name = 1;
inline bool Terminal::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Terminal::has_name() const {
  return _internal_has_name();
}
inline void Terminal::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Terminal::name() const {
  // @@protoc_insertion_point(field_get:placer.Terminal.name)
  return _internal_name();
}
inline void Terminal::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:placer.Terminal.name)
}
inline std::string* Terminal::mutable_name() {
  // @@protoc_insertion_point(field_mutable:placer.Terminal.name)
  return _internal_mutable_name();
}
inline const std::string& Terminal::_internal_name() const {
  return name_.Get();
}
inline void Terminal::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Terminal::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:placer.Terminal.name)
}
inline void Terminal::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:placer.Terminal.name)
}
inline void Terminal::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:placer.Terminal.name)
}
inline std::string* Terminal::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Terminal::release_name() {
  // @@protoc_insertion_point(field_release:placer.Terminal.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Terminal::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:placer.Terminal.name)
}

// required .placer.eDirection dir = 2;
inline bool Terminal::_internal_has_dir() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Terminal::has_dir() const {
  return _internal_has_dir();
}
inline void Terminal::clear_dir() {
  dir_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::placer::eDirection Terminal::_internal_dir() const {
  return static_cast< ::placer::eDirection >(dir_);
}
inline ::placer::eDirection Terminal::dir() const {
  // @@protoc_insertion_point(field_get:placer.Terminal.dir)
  return _internal_dir();
}
inline void Terminal::_internal_set_dir(::placer::eDirection value) {
  assert(::placer::eDirection_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  dir_ = value;
}
inline void Terminal::set_dir(::placer::eDirection value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:placer.Terminal.dir)
}

// optional int32 pos_x = 3;
inline bool Terminal::_internal_has_pos_x() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Terminal::has_pos_x() const {
  return _internal_has_pos_x();
}
inline void Terminal::clear_pos_x() {
  pos_x_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Terminal::_internal_pos_x() const {
  return pos_x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Terminal::pos_x() const {
  // @@protoc_insertion_point(field_get:placer.Terminal.pos_x)
  return _internal_pos_x();
}
inline void Terminal::_internal_set_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  pos_x_ = value;
}
inline void Terminal::set_pos_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos_x(value);
  // @@protoc_insertion_point(field_set:placer.Terminal.pos_x)
}

// optional int32 pos_y = 4;
inline bool Terminal::_internal_has_pos_y() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Terminal::has_pos_y() const {
  return _internal_has_pos_y();
}
inline void Terminal::clear_pos_y() {
  pos_y_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Terminal::_internal_pos_y() const {
  return pos_y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Terminal::pos_y() const {
  // @@protoc_insertion_point(field_get:placer.Terminal.pos_y)
  return _internal_pos_y();
}
inline void Terminal::_internal_set_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  pos_y_ = value;
}
inline void Terminal::set_pos_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pos_y(value);
  // @@protoc_insertion_point(field_set:placer.Terminal.pos_y)
}

// -------------------------------------------------------------------

// MacroCircuit

// repeated .placer.Macro m = 1;
inline int MacroCircuit::_internal_m_size() const {
  return m_.size();
}
inline int MacroCircuit::m_size() const {
  return _internal_m_size();
}
inline void MacroCircuit::clear_m() {
  m_.Clear();
}
inline ::placer::Macro* MacroCircuit::mutable_m(int index) {
  // @@protoc_insertion_point(field_mutable:placer.MacroCircuit.m)
  return m_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::placer::Macro >*
MacroCircuit::mutable_m() {
  // @@protoc_insertion_point(field_mutable_list:placer.MacroCircuit.m)
  return &m_;
}
inline const ::placer::Macro& MacroCircuit::_internal_m(int index) const {
  return m_.Get(index);
}
inline const ::placer::Macro& MacroCircuit::m(int index) const {
  // @@protoc_insertion_point(field_get:placer.MacroCircuit.m)
  return _internal_m(index);
}
inline ::placer::Macro* MacroCircuit::_internal_add_m() {
  return m_.Add();
}
inline ::placer::Macro* MacroCircuit::add_m() {
  // @@protoc_insertion_point(field_add:placer.MacroCircuit.m)
  return _internal_add_m();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::placer::Macro >&
MacroCircuit::m() const {
  // @@protoc_insertion_point(field_list:placer.MacroCircuit.m)
  return m_;
}

// repeated .placer.Terminal t = 2;
inline int MacroCircuit::_internal_t_size() const {
  return t_.size();
}
inline int MacroCircuit::t_size() const {
  return _internal_t_size();
}
inline void MacroCircuit::clear_t() {
  t_.Clear();
}
inline ::placer::Terminal* MacroCircuit::mutable_t(int index) {
  // @@protoc_insertion_point(field_mutable:placer.MacroCircuit.t)
  return t_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::placer::Terminal >*
MacroCircuit::mutable_t() {
  // @@protoc_insertion_point(field_mutable_list:placer.MacroCircuit.t)
  return &t_;
}
inline const ::placer::Terminal& MacroCircuit::_internal_t(int index) const {
  return t_.Get(index);
}
inline const ::placer::Terminal& MacroCircuit::t(int index) const {
  // @@protoc_insertion_point(field_get:placer.MacroCircuit.t)
  return _internal_t(index);
}
inline ::placer::Terminal* MacroCircuit::_internal_add_t() {
  return t_.Add();
}
inline ::placer::Terminal* MacroCircuit::add_t() {
  // @@protoc_insertion_point(field_add:placer.MacroCircuit.t)
  return _internal_add_t();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::placer::Terminal >&
MacroCircuit::t() const {
  // @@protoc_insertion_point(field_list:placer.MacroCircuit.t)
  return t_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace placer

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::placer::eOrientation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::placer::eOrientation>() {
  return ::placer::eOrientation_descriptor();
}
template <> struct is_proto_enum< ::placer::eDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::placer::eDirection>() {
  return ::placer::eDirection_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_placer_2eproto
